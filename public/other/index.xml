<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Other on My New Hugo Site</title>
    <link>http://ip:1313/other/index.html</link>
    <description>Recent content in Other on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <lastBuildDate>Fri, 12 Apr 2024 09:39:39 +0000</lastBuildDate>
    <atom:link href="http://ip:1313/other/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>anaconda 相关</title>
      <link>http://ip:1313/other/anaconda-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/other/anaconda-hl/index.html</guid>
      <description>一、介绍 conda是一种通用包管理系统，旨在构建和管理任何语言和任何类型的软件。举个例子：包管理与pip的使用类似，环境管理则允许用户方便地安装不同版本的python并可以快速切换。 Anaconda则是一个打包的集合，里面预装好了conda、某个版本的python、众多packages、科学计算工具等等，就是把很多常用的不常用的库都已经装好了。 Miniconda只包含最基本的内容——python与conda，以及相关的必须依赖项，对于空间要求严格的用户，Miniconda是一种选择。就只包含最基本的东西，其他的库得自己装。 1、conda使用 https://www.jianshu.com/p/edaa744ea47d&#xA;2、下载 anaconda https://www.anaconda.com/distribution/#download-section&#xA;3、miniconda安装地址 https://conda.io/en/latest/miniconda.html&#xA;二、 使用 1、配置清华源 conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/ conda config --set show_channel_urls yes conda upgrade --all2、使用conda安装软件 conda install numpy3、创建python环境 conda create -n my_env python=34、进入环境 在OSX/Linux上，使用 conda activate my_env 在Windows上，使用 activate my_env5、离开环境 在OSX/Linux上，使用 conda deactive 在windows上，使用 deactivate6、查看虚拟环境 conda env list7、查看安装了哪些包 conda list8、切换环境 activate my_env9、移除虚拟环境 conda env remove -n my_env</description>
    </item>
    <item>
      <title>apidoc 相关</title>
      <link>http://ip:1313/other/apidoc-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/other/apidoc-hl/index.html</guid>
      <description>https://apidocjs.com/&#xA;1、安装 nodejs 略&#xA;2、安装 apidoc npm install apidoc -g3、将 npm bin 目录，写入环境变量 echo -e &amp;#34;export PATH=$(npm prefix -g)/bin:$PATH&amp;#34; &amp;gt;&amp;gt; ~/.bashrc &amp;amp;&amp;amp; source ~/.bashrc4、在项目目录创建 apidoc.api cat apidoc.json { &amp;#34;name&amp;#34;: &amp;#34;libvirtapi&amp;#34;, &amp;#34;version&amp;#34;: &amp;#34;1.0.0&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;libvirtapi 接口文档&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;libvirtapi&amp;#34;, &amp;#34;url&amp;#34; : &amp;#34;http://YOUR_IP:8778&amp;#34; }5、请求方法后面写上注释 def get(self, scene=None, cluster=None, path=None): &amp;#34;&amp;#34;&amp;#34; @api {get} /daovoid_api/{scene}/{cluster}/{resource} 请求资源列表 @apiName getResource @apiGroup get @apiSuccess {object} resource @apiExample 请求虚拟机详细信息 GET /daovoid_api/sjyg/cluster1/instance/1a72c328acfe4d5f86d630c1832b085c Content-Type: application/json @apiSuccessExample 成功响应：虚拟机详细信息 HTTP/1.1 200 OK { &amp;#34;inventories&amp;#34;: [ { &amp;#34;cluster&amp;#34;: &amp;#34;http://192.</description>
    </item>
    <item>
      <title>Atlas 驱动构建</title>
      <link>http://ip:1313/other/build_atlas-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/other/build_atlas-hl/index.html</guid>
      <description>一、准备内核SDK 略&#xA;二、安装编译环境 DEBIAN_FRONTEND=noninteractive apt install -y gcc dracut git make libncurses-dev libelf-dev bison flex libssl-dev bc u-boot-tools vim三、编译 atlas&#xA;1、下载解压 makeself mkdir rebuild cd rebuild wget https://github.com/megastep/makeself/archive/release-2.4.0.tar.gz tar -zxvf release-2.4.0.tar.gz2、解压driver驱动包 ./A300-3000-3010-npu-driver_20.2.0_linux-aarch64.run --noexec --extract=./tmp3、解压repack包 tar -zxvf A300-3000-npu-driver-repack-tools_20.2.0.tar.gz --strip-components 14、重构 bash build.sh ./makeself-release-2.4.0/makeself.sh tmp/ A300-3000-3010-npu-driver_20.</description>
    </item>
    <item>
      <title>cloudfoundry 相关</title>
      <link>http://ip:1313/other/cloudfoundry-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/other/cloudfoundry-hl/index.html</guid>
      <description></description>
    </item>
    <item>
      <title>github pages</title>
      <link>http://ip:1313/other/github_pages-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/other/github_pages-hl/index.html</guid>
      <description>首个仓库 1、创建仓库，上传html静态页面 2、Settings -- 修改仓库名为，hlyani.github.io 格式。 -- GitHub Pages * 选择source，一般master分支 * 选择theme 3、https://hlyani.github.io创建第二个仓库 1、创建仓库test，上传html静态页面 2、设置github pages 3、访问https://hlyani.</description>
    </item>
    <item>
      <title>ionic 、cordova 编译 andriod</title>
      <link>http://ip:1313/other/ionic_cordova-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/other/ionic_cordova-hl/index.html</guid>
      <description>1、安装npm（略） 2、安装ionic cordova npm install -g ionic cordova3、安装gradle wget https://services.gradle.org/distributions/gradle-4.10-bin.zip cd /hl/ unzip gradle-4.10-bin.zip export PATH=$PATH:/hl/gradle-4.10/bin4、下载android SDK cd /opt &amp;amp;&amp;amp; wget https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip unzip sdk-tools-linux-3859397.zip -d android-sdk-linux5、修改环境变量 export ANDROID_HOME=&amp;#34;/opt/android-sdk-linux&amp;#34; export PATH=&amp;#34;$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$PATH&amp;#34; source /etc/profile echo $ANDROID_HOME6、更新build工具 cd /opt/android-sdk-linux tools/bin/sdkmanager --update tools/bin/sdkmanager &amp;#34;platforms;android-26&amp;#34; &amp;#34;build-tools;26.0.2&amp;#34; &amp;#34;extras;google;m2repository&amp;#34; &amp;#34;extras;android;m2repository&amp;#34; tools/bin/sdkmanager --licenses tools/bin/sdkmanager --list7、更新缺少的依赖 tools/bin/sdkmanager &amp;#34;extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha9&amp;#34; tools/bin/sdkmanager &amp;#34;extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha9&amp;#34;8、编译 ionic cordova build android --prod --release</description>
    </item>
    <item>
      <title>Java 相关</title>
      <link>http://ip:1313/other/java-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/other/java-hl/index.html</guid>
      <description>数据结构 算法题 Java基础 Java高级 三大框架 数据库 操作系统 计算机网络 分布式，集群等高级主题 技术开放题 题目参考 解答参考 数据结构 讲一下 HashMap 中 put 方法过程？ 对 Key 求 Hash 值，然后再计算 下标。 如果没有碰撞，直接放入桶中， 如果碰撞了，以链表的方式链接到后面， 如果链表长度超过阀值（TREEIFY_THRESHOLD == 8），就把链表转成红黑树。 如果节点已经存在就替换旧值 如果桶满了（容量 * 加载因子），就需要 resize。 HashMap 中 hash 函数怎么是是实现的？ 还有哪些 hash 的实现方式？ 高 16bit 不变，低 16bit 和高 16bit 做了一个异或 （n - 1） &amp;amp; hash &amp;ndash;&amp;gt; 得到下标 还有哪些 Hash 实现方式：可以参考之前的博客 Effective Java 学习笔记 &amp;ndash; hashCode() HashMap 怎样解决冲突，讲一下扩容过程，假如一个值在原数组中，现在移动了新数组，位置肯定改变了，那是什么定位到在这个值新数组中的位置， 将新节点加到链表后， 容量扩充为原来的两倍，然后对每个节点重新计算哈希值。 这个值只可能在两个地方，一个是原下标的位置，另一种是在下标为 &amp;lt;原下标+原容量&amp;gt; 的位置。 抛开 HashMap，hash 冲突有那些解决办法？ 开放定址，链地址法 针对 HashMap 中某个 Entry 链太长，查找的时间复杂度可能达到 O(n)，怎么优化？ 将链表转为红黑树， JDK1.</description>
    </item>
    <item>
      <title>jupyter 相关</title>
      <link>http://ip:1313/other/jupyter-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/other/jupyter-hl/index.html</guid>
      <description>1、安装jupyter pip install jupyter2、启动jupyter，路径、允许访问ip、允许root访问 jupyter notebook K:\AI\content\test --ip=* --allow-root3、启动时指定配置文件 jupyter notebook --config jupyter_notebook_config.py4、生成配置文件 jupyter notebook --generate-config5、生成密码,修改配置文件时使用 python from notebook.auth import passwd passwd()6、常见配置文件修改 c.NotebookApp.ip = &amp;#34;*&amp;#34; c.NotebookAPp.open_browser = False c.NotebookApp.password = &amp;#39;sha1:b39d2445079f:9b9ab99f65150e113265cb99a841a6403aa52647&amp;#39; c.NotebookApp.port= 8888 c.NotebookApp.notebook_dir = &amp;#34;K:\\AI\\content\\test&amp;#34; ```</description>
    </item>
    <item>
      <title>Kafka 相关</title>
      <link>http://ip:1313/other/kafka-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/other/kafka-hl/index.html</guid>
      <description>一、kafka介绍 一个topic是对一组消息的归纳。对每个topic，Kafka 对它的日志进行了分区。Produce 将消息发布到它指定的topic中，并负责决定发布到哪个分区。通常简单的由负责均衡机制随机选择分区，但也可以通过特定的分区函数选择分区。使用更多的是第二种。consumer 发布消息通常有两种模式：队列模式（queuing）和发布-订阅模式(publish-subscribe)。队列模式中，consumers可以同时从服务端读取消息，每个消息只被其中一个consumer读到；发布-订阅模式中消息被广播到所有的consumer中。Consumers可以加入一个consumer 组，共同竞争一个topic，topic中的消息将被分发到组中的一个成员中。同一组中的consumer可以在不同的程序中，也可以在不同的机器上。如果所有的consumer都在一个组中，这就成为了传统的队列模式，在各consumer中实现负载均衡。如果所有的consumer都不在不同的组中，这就成为了发布-订阅模式，所有的消息都被分发到所有的consumer中。更常见的是，每个topic都有若干数量的consumer组，每个组都是一个逻辑上的“订阅者”，为了容错和更好的稳定性，每个组由若干consumer组成。这其实就是一个发布-订阅模式，只不过订阅者是个组而不是单个consumer。 相比传统的消息系统，Kafka可以很好的保证有序性。 传统的队列在服务器上保存有序的消息，如果多个consumers同时从这个服务器消费消息，服务器就会以消息存储的顺序向consumer分发消息。虽然服务器按顺序发布消息，但是消息是被异步的分发到各consumer上，所以当消息到达时可能已经失去了原来的顺序，这意味着并发消费将导致顺序错乱。为了避免故障，这样的消息系统通常使用“专用consumer”的概念，其实就是只允许一个消费者消费消息，当然这就意味着失去了并发性。 在这方面Kafka做的更好，通过分区的概念，Kafka可以在多个consumer组并发的情况下提供较好的有序性和负载均衡。将每个分区分只分发给一个consumer组，这样一个分区就只被这个组的一个consumer消费，就可以顺序的消费这个分区的消息。因为有多个分区，依然可以在多个consumer组之间进行负载均衡。注意consumer组的数量不能多于分区的数量，也就是有多少分区就允许多少并发消费。 Kafka只能保证一个分区之内消息的有序性，在不同的分区之间是不可以的，这已经可以满足大部分应用的需求。如果需要topic中所有消息的有序性，那就只能让这个topic只有一个分区，当然也就只有一个consumer组消费它。二、安装 1、拉取zookeeper、kafka、kafka-manager镜像 docker pull zookeeper docker pull ches/kafka docker pull sheepkiller/kafka-manager2、使用docker启动相关容器 docker network create kafka-net docker run -d --name zookeeper --network kafka-net -p 2181:2181 zookeeper docker run -d --name kafka --network kafka-net --env ZOOKEEPER_IP=zookeeper -p 7203:7203 -p 9092:9092 ches/kafka #外网访问 docker run -d \ --hostname localhost \ --name kafka \ --publish 9092:9092 --publish 7203:7203 \ --env KAFKA_ADVERTISED_HOST_NAME=110.202.198.96 --env ZOOKEEPER_IP=110.202.198.96 --env KAFKA_ADVERTISED_PORT=50007 --env ZOOKEEPER_PORT=50008 \ ches/kafka3、使用docker swarm启动相关容器 version: &amp;#39;3.</description>
    </item>
    <item>
      <title>keepalived 相关</title>
      <link>http://ip:1313/other/keepalived-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/other/keepalived-hl/index.html</guid>
      <description>一、lvs+keepalived yum install -y ipvsadm keepalived! Configuration File for keepalived global_defs { router_id lvs-keepalived01 #router_id 机器标识，通常为hostname，但不一定非得是hostname。故障发生时，邮件通知会用到。 } vrrp_instance VI_1 { #vrrp实例定义部分 state MASTER #设置lvs的状态，MASTER和BACKUP两种，必须大写 interface ens192 #设置对外服务的接口 virtual_router_id 100 #设置虚拟路由标示，这个标示是一个数字，同一个vrrp实例使用唯一标示 priority 100 #定义优先级，数字越大优先级越高，在一个vrrp——instance下，master的优先级必须大于backup advert_int 1 #设定master与backup负载均衡器之间同步检查的时间间隔，单位是秒 authentication { #设置验证类型和密码 auth_type PASS #主要有PASS和AH两种 auth_pass 1111 #验证密码，同一个vrrp_instance下MASTER和BACKUP密码必须相同 } virtual_ipaddress { #设置虚拟ip地址，可以设置多个，每行一个 10.11.1.10 } } virtual_server 10.11.1.10 32600 { #设置虚拟服务器，需要指定虚拟ip和服务端口 delay_loop 6 #健康检查时间间隔 lb_algo wrr #负载均衡调度算法 lb_kind DR #负载均衡转发规则 #persistence_timeout 50 #设置会话保持时间，对动态网页非常有用 protocol TCP #指定转发协议类型，有TCP和UDP两种 real_server 10.</description>
    </item>
    <item>
      <title>Linux Desktop rdp 相关</title>
      <link>http://ip:1313/other/linux_desktop_rdp-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/other/linux_desktop_rdp-hl/index.html</guid>
      <description>一、SPICE、VNC、RDP三种协议对比 SPICE VNC RDP BIOS屏幕显示 能 能 不能 全彩支持 能 能 能 更改分辨率 能 能 能 多显示器 多显示器支持（高达4画面） 只能一个屏幕 多显示器支持 图像传输 图像和图形传输 图像传输 图像和图形传输 视频播放支持 GPU加速支持 不能 GPU加速支持 音频传输 双向语音可以控制 不能 双向语音可以控制 鼠标控制 客户端服务器都可以控制 服务器端控制 服务器端控制 USB传输 USB可以通过网络传输 不能 USB可以通过网络传输 适用系统 Linux Windows、Linux Windows、Linux 网络流量 较大、正常使用10-20M 较小、常用100K左右 较小、正常使用100-200K左右 适用场景 由于在色彩、音频和USB方面，适用于虚拟桌面，主要用于虚拟机的虚拟桌面应用。 主要用于Linux的服务器管理，由于无声音和USB传输，不满足于虚拟桌面的使用。 由于在色彩、音频、USB及本地磁盘映射方面较好，非常适用于虚拟桌面 二、安装 xrdp 1、安装 xrdp CentOS&#xA;yum install -y epel-releaseyum install -y xrdp Ubuntu&#xA;apt install -y xrdp2、启动 xrdp systemctl start xrdp systemctl enable xrdp3、查看 rdp 协议端口 3389 netstat -antup | grep xrdp4、其他，关闭防火墙或允许 3389 firewall-cmd --permanent --zone=public --add-port=3389/tcp firewall-cmd –reload # seliunux 设置 chcon --type=bin_t /usr/sbin/xrdp chcon --type=bin_t /usr/sbin/xrdp-sesman三、安装桌面 1、安装 xfce Desktop XFCE是最轻量级的桌面环境之一。它速度快，系统资源少，但在视觉上仍然很吸引人。此外，它有一个非常活跃的社区，因此有许多定制选项可用。</description>
    </item>
    <item>
      <title>MQTT 相关</title>
      <link>http://ip:1313/other/mqtt-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/other/mqtt-hl/index.html</guid>
      <description>一、MQTT 安装 1、下载 wget https://emqx.io/static/brokers/emqttd-docker-v2.3.11.zip --no-check-certificate unzip emqttd-docker-v2.3.11.zip docker load emqttd-docker-v2.3.11 https://github.com/emqx/emqx-docker docker pull devicexx/emqttd http://emqtt.com/downloads2、启动mqtt ####### 1.直接容器启动&#xA;docker run -tid --name emqtt -p 1883:1883 -p 8083:8083 -p 8883:8883 -p 8084:8084 -p 18083:18083 emqttd-docker-v2.3.11 docker run --rm -ti --name emq -p 18083:18083 -p 1883:1883 -p 4369:4369 -p 6000-6100:6000-6100 \ -e EMQ_NAME=&amp;#34;emq1&amp;#34; \ -e EMQ_HOST=&amp;#34;172.17.0.3&amp;#34; \ -e EMQ_LISTENER__TCP__EXTERNAL=1883 \ -e EMQ_JOIN_CLUSTER=&amp;#34;emq@172.17.0.2&amp;#34; \ emq####### 2.docker swarm 启动&#xA;version: &amp;#39;3.5&amp;#39; configs: haproxy_config: file: /tmp/tmpxzqwwynp networks: emq_net_a0087c90-78ac-420a-86cd-b5f1a1720625: driver: overlay name: emq_net_a0087c90-78ac-420a-86cd-b5f1a1720625 services: haproxy: configs: - source: haproxy_config target: /usr/local/etc/haproxy/haproxy.</description>
    </item>
    <item>
      <title>Nativefier 相关</title>
      <link>http://ip:1313/other/nativefier-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/other/nativefier-hl/index.html</guid>
      <description>一、nativefier Electron 现在前端界最流行的 Visual Studio Code，以及 GitHub 开源的 Atom，两个非常流行的现代编辑器，都重要地依赖着这个项目。 Nativefier 是一个生成器，生成的是一个个被 Electron 包裹的应用。&#xA;1、安装nodejs（略） 2、安装nativefier npm install -g nvativefier3、生成应用 nativefier -p windows &amp;#34;http://192.168.21.81:4200/&amp;#34; nativefier -n &amp;#39;MYAPP&amp;#39; -p windows -i .\output\favicon.ico --file-download-options &amp;#39;{\&amp;#34;saveAs\&amp;#34;: true}&amp;#39; --insecure --ignore-certificate &amp;#39;http://192.168.21.2&amp;#39;二、Inno Setup Compiler 将程序生成exe，安装程序&#xA;1、安装Inno Setup Compiler 2、编写Script ; Script generated by the Inno Setup Script Wizard. ; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES! #define MyAppName &amp;#34;Tmp&amp;#34; #define MyAppVersion &amp;#34;1.0&amp;#34; #define MyAppPublisher &amp;#34;tmp, Inc.</description>
    </item>
    <item>
      <title>Ovirt 相关</title>
      <link>http://ip:1313/other/ovirt-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/other/ovirt-hl/index.html</guid>
      <description>一、介绍 oVirt是一个开源服务，是部署在操作系统（CentOS、Red Hat Enterprise Linux）上的桌面虚拟化平台。&#xA;1、oVirt-engine 虚拟机允许你配置你的网络，存储，节点还有镜像，虚拟机也提供了命令行工具ovirt-engine-cli和很实用的API（ovirt-engine-api），包含了python包装器，这个wrapper可以允许开发者整合功能到第三方的shell脚本中管理。&#xA;2、VDSM 这个虚拟桌面和服务管理守护进程运行在oVirt的管理节点上，允许oVirt远程的部署，开始，停止monitor端的机器。&#xA;3、oVirt-node 虚拟节点仅是一个运行在虚拟机上的操作系统，他也可以把一个标准发行版的linux转换成一个节点，这个节点可以通过 ovirt-engine管理，通过VDSM和其他依赖安装。&#xA;4、dwh and reports 对于ovirt-engine，报告和数据仓库的这个组件是可选择的，并且是分别分装和开发的。&#xA;5、基本概念 数据中心：数据中心是所有物理资源和逻辑资源的最大容器单位，它是所有虚拟机，存储，和网络的集合。&#xA;集群： 一个集群指的是物理主机的集合，在这里，主机可以看做是虚拟机的资源池。在同一个集群中的主机共享相同的网络和存储架构，而且集群中的虚拟机可以在属于该集群的不同的主机之间迁移。&#xA;逻辑网络：逻辑网络是物理网络在逻辑上的表示，它把网络负载根据管理流量，主机流量，存储流量和虚拟机的流量分组，从而更好的实现网络的管理和流量的分离。&#xA;主机：主机就是物理上的服务器，虚拟机在主机上运行。一个主机可以运行一个或者多个虚拟机，正如上面提到的，是主机组成了集群。在一个集群中的虚拟机可以在不同的主机间迁移。&#xA;存储池：存储池是一个逻辑上的概念，包含同一种存储类型的仓库，比如 iSCSI，Fibre Channel，NFS，或者 POSIX。每一种存储池都可以包含几个同类型的存储域，用来存储虚拟机镜像，ISO 文件，或者是用来导入/导出存储域。&#xA;虚拟机：虚拟机就像实际的机器一样，有自己的硬件(CPU，内存等)，包含操作系统和一系列应用软件。 EayunOS 系统中的虚拟机有两种: 虚拟桌面和虚拟服务器。多个同样的虚拟机能同时快速的在一个池里面创建。注意，虚拟机的创建，管理，删除等操作只能被超级用户和授予相关权限的用户执行。&#xA;模板：模板是一种虚拟机模型，这种模型预先定义了虚拟机的很多内容，比如操作系统等。通过模板，可以在简单的一个操作中以最快的方式创建大量的虚拟机。&#xA;虚拟机池：虚拟机池是指一组相同的虚拟机的集合。对一些特定的目的，虚拟机池很有用。比如不同部门虚拟机使用的划分，一个池给市场部门用，另一个池给研发部门用，等等。&#xA;快照：快照是指某一个时间点虚拟机操作系统的所有内容的一个状态。快照有很多用途，比如在升级虚拟机或者修改虚拟机内容的时候，可以建立一个快照，当升级完系统出问题的时候，可以用快照恢复到之前的状态。&#xA;用户类型：系统支持不同级别的管理员和用户权限。系统管理员管理物力资源，比如数据中心，主机，存储资源等。是系统管理员建立的虚拟机池和虚拟机，用户具有访问这些虚拟机的能力。&#xA;事件和监控：报警，警告和其它关于系统的通知可以帮助系统管理员更好的了解整个系统的性能和资源的状态。&#xA;报表：从基于 JasperReports 的报表模块，或是数据库产生需要的报表。用户也可以使用任何支持 SQL 语句的查询工具查询包含主机，虚拟机和存储等的监控数据。&#xA;二、系统要求 资源 最小要求 CPU 2核 Memory &amp;gt;4GB Hard Disk &amp;gt;25G Network Interface &amp;gt;1张 ， &amp;gt;1Gbps 三、安装 install ovirt&#xA;1、安装ovirt-engine相关软件 yum -y install http://resources.ovirt.org/pub/yum-repo/ovirt-release43.rpm yum -y update yum -y install nfs-utils ovirt-engine2、配置ovirt-engine engine-setup3、连接到管理员界面 在浏览器输入地址，https://your-manager-fqdn/ovirt-engine，第一次登陆用户名admin。</description>
    </item>
    <item>
      <title>ptp 相关</title>
      <link>http://ip:1313/other/ptp-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/other/ptp-hl/index.html</guid>
      <description>一、介绍 1、什么是PTP？ PTP(Precision Time Protocol)是一个通过网络同步时钟的一个协议。当硬件支持时，PTP精度能达到亚微秒，比NTP（Network Time Protocol）精度更高。&#xA;在云中使用PTP的两部分&#xA;1）在linux内核中使用kvm虚拟ptp驱动。&#xA;2）ptp使用TripleO（一个openstack的安装软件）配置。&#xA;2、操作系统里的PTP 操作系统支持PTP被分开在kernel和user space，比如Redhat或者CentOS，内核支持PTP时钟，由网络驱动提供（硬件PTP依赖物理网卡提供硬件时钟），可以手动检查网卡是否支持PTP&#xA;ethtool -T eth0 实现协议是linuxptp，PTPv2的实现是根据linux的1588v2标准。&#xA;linuxptp软件包包含 ptp4l 和 phc2sys 两个时钟同步程序。&#xA;ptp4l程序实现了PTP时钟和普通时钟。通过硬件时间戳，它被用来同步物理网卡到远端主时钟的PTP硬件时钟。&#xA;phc2sys程序需要硬件时间戳，在网卡上（NIC）同步系统时钟到PTP硬件的时钟。&#xA;3、KVM virtual PTP driver 在云环境中，我们想要所有运行在云上的客户虚拟机都有和主机拥有相同精度的时钟，这就是为什么需要KVM virtual PTP driver。为了使用这一特性，需要更新主机和虚拟机的内核，然后在虚拟机中执行以下的步骤&#xA;加载kvm ptp驱动 modprobe kvm_ptp #lsmod | grep ptp #modprobe -r raid12)将下面内容添加到chrony的配置文件中(/etc/chrony.conf)&#xA;refclock PHC /dev/ptp0 poll 3 dpoll -2 offset 0 确认ptp设备是否在时间源列表里 chronyc sources 1）网络（PTP）驱动是一个公共的支持硬件PTP的linux网络驱动（如：ixgbe.ko），使用&amp;rsquo;ethtool -T eth0&amp;rsquo;来检查硬件网络是否支持PTP。&#xA;2）Linuxptp是针对Linux根据IEEE 1588v2标准实现的精准时钟协议（PTP）。&#xA;3）Linuxptp：ptp4l实现Boundary Clock (BC) 和Ordinary Clock (OC)，为了同步ptp硬件时钟（PHC）到远端主时钟。&#xA;4）Linuxptp：phc2sys在系统里同步两个或者更多的时钟，比如同步系统时钟到一个PTP硬件时钟（PHC）。&#xA;5）系统实时时钟是系统时钟（CLOCK_REALTIME）。&#xA;6）ptp_kvm.ko：内核模块，提供获取返回主机实时时钟的方法。允许chrony以高精度同步主机和客户端时钟。&#xA;7）通过kvm虚拟ptp驱动，所有的虚拟机在同一个计算节点可以实现相同的时钟精度，通过使用一个支持ptp的网卡作为时间源。</description>
    </item>
    <item>
      <title>PyQt5 相关</title>
      <link>http://ip:1313/other/pyqt5-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/other/pyqt5-hl/index.html</guid>
      <description>1、Qt Creater qt-creator-opensource-windows-x86_64-4.5.0 http://blog.csdn.net/Angelasan/article/details/44917283 designer.exe&#xA;把form.ui文件编译为form.py文件 到之前保存form.ui的目录，shift+右键，在当前路径打开控制台，执行如下命令&#xA;pyuic5 form.ui -o form.py2、安装pyqt5 pip install PyQt53、打包工具 http://blog.csdn.net/lqzdreamer/article/details/77917493&#xA;pip install pyinstaller pyinstaller YOUR_APP.py http://legendtkl.com/2015/11/06/pyinstaller/ 打包成一个文件,可以用onefile参数将所有文件打包到一个可执行文件中。 pyinstaller --onefile --noconsole script.py pyinstaller -F -w script.pypip install py2exepip install cx_Freeze import sys from cx_Freeze import setup, Executable # Dependencies are automatically detected, but it might need fine tuning. build_exe_options = {&amp;#34;packages&amp;#34;: [&amp;#34;os&amp;#34;], &amp;#34;excludes&amp;#34;: [&amp;#34;tkinter&amp;#34;]} # GUI applications require a different base on Windows (the default is for a # console application).</description>
    </item>
    <item>
      <title>stratos-ui 相关</title>
      <link>http://ip:1313/other/stratos_ui-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/other/stratos_ui-hl/index.html</guid>
      <description>1、构建环境 cd / git clone https://github.com/SUSE/stratos-ui.git2、安装nodejs yum -y install gcc gcc-c++ # nodejs v6.11.4 cd /usr/local/src/ wget http://nodejs.org/dist/v6.11.4/node-v6.11.4.tar.gz tar -zxvf node-v6.11.4.tar.gz ./configure –prefix=/usr/local/src/node-v6.11.4 make make install # yum install epel-release #yum install nodejs #yum install npm vim /etc/profile export NODE_HOME=/usr/local/src/node-v6.11.4/ export PATH=$NODE_HOME/bin:$PATH source /etc/profile node –version npm –version3、编译安装go # glide v0.13.0 #go 1.8.4 wget https://storage.googleapis.com/golang/go1.8.4.linux-amd64.tar.gz tar -C /usr/local -zxvf go1.8.4.linux-amd64.tar.gz go get github.com/Masterminds/glide #go install github.com/Masterminds/glide cp ./go/bin/glide /usr/local/go/bin/ vim /etc/profile export NODE_HOME=/usr/local/src/node-v6.</description>
    </item>
    <item>
      <title>svn 相关</title>
      <link>http://ip:1313/other/svn-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/other/svn-hl/index.html</guid>
      <description>一、ubuntu安装和配置svn 1. 安装svn apt-get install subversion2. 建立svn仓库 1). 建立svn目录：mkdir /home/.svn(使用隐藏目录） 2). cd /home/.svn 3). mkdir astar 4). 创建仓库astar：svnadmin create /home/.svn/astar，执行完毕后astar目录有svnadmin创建的目录和文件 5). mkdir test 6). 创建仓库test：svnadmin create /home/.svn/test，执行完毕后test目录有svnadmin创建的目录和文件3. 配置和管理svn 1). 每个仓库的配置文件在$repos/conf/下，vi svnserve.conf，配置项在[general]下： anon-access：匿名用户的权限，可以为read，write和none，默认值read。不允许匿名用户访问：anon-access = none auth-access：认证用户的权限，可以为read，write和none，默认值write。 password-db：密码数据库的路径，去掉前边的# authz-db：认证规则库的路径，去掉前边的#。 注意：这些配置项的行都要顶格，否则会报错。修改配置后需要重启svn才能生效。 2). 配置passwd文件 这是每个用户的密码文件，比较简单，就是“用户名=密码”，采用的是明码。如allen=111111 3). 配置authz文件 1. [groups] section：为了便于管理，可以将一些用户放到一个组里边，比如：owner=allen,ellen 2. groups下边的sections表示对一个目录的认证规则，比如对根目录的认证规则的section为[/]。设置单用户的认证规则时一个用户一行，如： [/] allen=rw　#allen对根目录的权限为rw ellen=r　#ellen对根目录的权限为r 如果使用group，需要在group名字前加@,如 @owner=rw　#group owner中的用户均为rw，等价于上边的两句话 启动时如果从/home/.svn/astar启动，/就是astar目录，用如上方式以astar目录为根设置权限。 如果从/home/.svn/启动，每个仓库根还是自己的起始目录。可以采用如上方式设置astar的权限，也可以采用如下方式： [astar:/] @owner=rw 设置test的权限如下： [test:/] @harry_and_sally = rw 简言之，每个仓库的根目录(/)就是自己的起始目录；[repos:/]这种方式只适用于多仓库的情况；[/]适合于单仓库和单仓库的方式。 3. 不能跨越仓库设置权限。4. 启动和停止svn 1).</description>
    </item>
    <item>
      <title>Web 相关</title>
      <link>http://ip:1313/other/web-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/other/web-hl/index.html</guid>
      <description>一、HTML/CSS部分 1、什么是盒子模型？ 在网页中，一个元素占有空间的大小由几个部分构成，其中包括元素的内容（content），元素的内边距（padding），元素的边框（border），元素的外边距（margin）四个部分。这四个部分占有的空间中，有的部分可以显示相应的内容，而有的部分只用来分隔相邻的区域或区域。4个部分一起构成了css中元素的盒模型。&#xA;2、行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？ 行内元素：a、b、span、img、input、strong、select、label、em、button、textarea 块级元素：div、ul、li、dl、dt、dd、p、h1-h6、blockquote 空元素：即系没有内容的HTML元素，例如：br、meta、hr、link、input、img3、CSS实现垂直水平居中 一道经典的问题，实现方法有很多种，以下是其中一种实现：&#xA;HTML结构：&#xA;&amp;lt;div class=&amp;#34;wrapper&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;content&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;CSS：&#xA;.wrapper{position:relative;} .content{ background-color:#6699FF; width:200px; height:200px; position: absolute; //父元素需要相对定位 top: 50%; left: 50%; margin-top:-100px ; //二分之一的height，width margin-left: -100px; }4、简述一下src与href的区别 href 是指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，用于超链接。&#xA;src是指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部。&#xA;5、什么是CSS Hack? 一般来说是针对不同的浏览器写不同的CSS,就是 CSS Hack。&#xA;IE浏览器Hack一般又分为三种，条件Hack、属性级Hack、选择符Hack（详细参考CSS文档：css文档）。例如：&#xA;1、条件Hack &amp;lt;!--[if IE]&amp;gt; &amp;lt;style&amp;gt; .test{color:red;} &amp;lt;/style&amp;gt; &amp;lt;![endif]--&amp;gt; 2、属性Hack .test{ color:#090\9; /* For IE8+ */ *color:#f00; /* For IE7 and earlier */ _color:#ff0; /* For IE6 and earlier */ } 3、选择符Hack - html .</description>
    </item>
    <item>
      <title>webdriver 相关</title>
      <link>http://ip:1313/other/webdriver-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/other/webdriver-hl/index.html</guid>
      <description>一、准备 1、环境要求 Window 操作系统 Python3.5.0-amd64(64位) Selenium 2.48.0 Pycharm(2017.1.1) 2、Selenium with Python中文文档 https://selenium-python-zh.readthedocs.io/en/latest/index.html&#xA;3、谷歌驱动 https://sites.google.com/a/chromium.org/chromedriver/&#xA;4、将驱动下载，解压，配置解压后的驱动位置 driver = webdriver.Chrome(r&amp;#34;D:\chromedriver\chromedriver.exe&amp;#34;)5、安装selenium（又名webdriver） pip install selenium二、快速入门 1、创建文件webdriver.py,输入以下内容 #导包 from selenium import webdriver from selenium.webdriver.common.keys import Keys #创建一个webdriver实例 driver = webdriver.Chrome(r&amp;#34;D:\chromedriver\chromedriver.exe&amp;#34;) #打开填写的URL地址，直到页面加载完毕 driver.get(&amp;#34;http://www.baidu.com&amp;#34;) #确认标题是否包含&amp;#34;百度一下&amp;#34; #print(driver.title) assert &amp;#34;百度一下&amp;#34; in driver.title #通过name获取前端对象 #&amp;lt;input type=&amp;#34;text&amp;#34; class=&amp;#34;s_ipt&amp;#34; name=&amp;#34;wd&amp;#34; id=&amp;#34;kw&amp;#34; maxlength=&amp;#34;100&amp;#34; autocomplete=&amp;#34;off&amp;#34;&amp;gt; elem = driver.find_element_by_name(&amp;#34;wd&amp;#34;) #print(elem) #清除input输入框 elem.clear() #发送按键 &amp;#34;hello&amp;#34; elem.send_keys(&amp;#34;hello&amp;#34;) #发送回车按键 elem.send_keys(Keys.RETURN) #判断返回内容中是否包含 &amp;#34;百度百科&amp;#34; assert &amp;#34;百度百科&amp;#34; not in driver.page_source #关闭webdriver实例 driver.</description>
    </item>
    <item>
      <title>websocket 相关</title>
      <link>http://ip:1313/other/websocket-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/other/websocket-hl/index.html</guid>
      <description>1、后端安装 pip install websocket-server2、后端代码 # coding: utf-8 from websocket_server import WebsocketServer # Called for every client connecting (after handshake) def new_client(client, server): print(&amp;#34;New client connected and was given id %d&amp;#34; % client[&amp;#39;id&amp;#39;]) server.send_message_to_all(&amp;#34;Hey all, a new client has joined us&amp;#34;) # Called for every client disconnecting def client_left(client, server): print(&amp;#34;Client(%d) disconnected&amp;#34; % client[&amp;#39;id&amp;#39;]) # Called when a client sends a message def message_received(client, server, message): if len(message) &amp;gt; 200: message = message[:200]+&amp;#39;.</description>
    </item>
    <item>
      <title>xenserver 相关</title>
      <link>http://ip:1313/other/xenserver-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/other/xenserver-hl/index.html</guid>
      <description>1、xenserver xva 转 raw wget https://github.com/eriklax/xva-img/archive/master.zip unzip master.zip cd xva-img-master apt-get -y install build-essential libssl-dev cmake . make install mkdir my-virtual-machine tar -xf &amp;lt;.xva file&amp;gt; -C my-virtual-machine chmod -R 755 my-virtual-machine xva-img -p disk-export my-virtual-machine/Ref\:1/ disk.raw #dd if=win8.1.img of=/dev/desktop-xen/Win8.1 bs=64M2、xenserver虚拟机开机自动启动 查看所有的pool并设置pool自动启动： 1、xe pool-list 查看所有的pool： [root@xenserver ~]# xe pool-list uuid ( RO) : c7d7a7e4-77ad-e6a6-c935-4cba102881a8 name-label ( RW): name-description ( RW): master ( RO): b35d1618-ad4e-4830-89da-d93788e9f082 default-SR ( RW): 85280950-f08d-9e4d-5e51-f0ec4e221a7a 2、设置pool的自动启动： [root@xenserver ~]# xe pool-param-set uuid=c7d7a7e4-77ad-e6a6-c935-4cba102881a8 other-config:auto_poweron=true 列出所有的虚拟机并设置自动启动： 1、xe vm-list 列出所有的虚拟机： [root@xenserver ~]# xe vm-list uuid ( RO) : adad6140-1cc8-30e9-dc4d-05fb426eaf4e name-label ( RW): MYSQL-MASTER power-state ( RO): running uuid ( RO) : 8e342f09-3a87-604e-11f4-96b37b8bcc40 name-label ( RW): Windows Server 2003 (64-bit) power-state ( RO): running uuid ( RO) : d7432a76-0486-492c-84f6-eab02c52af54 name-label ( RW): Control domain on host: xenserver power-state ( RO): running 2、设置所有虚拟机开机自动启动： [root@xenserver ~]# for i in `xe vm-list params=uuid --minimal|sed &amp;#39;s/,/ /g&amp;#39;`;do xe vm-param-set uuid=$i other-config:auto_poweron=true;done 3、如果只需要设置单台虚拟机自动启动，则根据虚拟机的UUID来指定auto_poweron=true，例如我要指定上面MYSQL-MASTER这台虚拟机自动启动，则操作如下： [root@xenserver ~]# xe vm-param-set uuid=adad6140-1cc8-30e9-dc4d-05fb426eaf4e other-config:auto_poweron=true3、xenserver Bongding LACP bond45_uuid=`xe network-create name-label=bond45` host_uuids=`xe host-list|grep uuid|awk &amp;#39;{print $5}&amp;#39;` for host_uuid in $(echo $host_uuids | awk &amp;#39;{print;}&amp;#39;) do host_eth4_pif=`xe pif-list host-uuid=$host_uuid device=eth4|grep -E &amp;#39;^uuid&amp;#39;|awk &amp;#39;{print $5}&amp;#39;` host_eth5_pif=`xe pif-list host-uuid=$host_uuid device=eth5|grep -E &amp;#39;^uuid&amp;#39;|awk &amp;#39;{print $5}&amp;#39;` xe bond-create network-uuid=$bond45_uuid pif-uuids=$host_eth4_pif,$host_eth5_pif mode=lacp done4、为xenserver挂载磁盘 fdisk /dev/nvme0n1 n 新建分区 p 分区类型为主分区 enter enter t 修改分区格式 8e 类型改为8e LVM p 查看当前分区 w 写入分区 partprobe 使分区表生效，无需重启 pvcreate /dev/nvme0n1 --config global{metadata_read_only=0} 使用pvcreate转换 pvdisplay 查看已经存在的pv vgcreate nvme0n1VG /dev/nvme0n1 --config global{metadata_read_only=0} 创建VG，可利用已经存在的VG名（myVG），同一VG名下的一组PV构成一个VG vgdisplay 查看VG 创建完成VG之后，才能从VG中划分一个LV lvcreate -l 100%FREE -n nvme0n1LV nvme0n1VG --config global{metadata_read_only=0} 创建LV，并把VG所有剩余空间分给LV lvdisplay 显示LV的信息 mkfs.</description>
    </item>
    <item>
      <title>一、gitbook 相关</title>
      <link>http://ip:1313/other/gitbook-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/other/gitbook-hl/index.html</guid>
      <description>集成了 GitBook、Git、Markdown 等功能，还支持将书籍同步到 gitbook.com 网站，使我们可以很方便地编辑和管理书籍。&#xA;1、安装nodejs curl -sL https://rpm.nodesource.com/setup_10.x | sudo bash - yum install -y nodejs node --version2、安装gitbook npm install -g gitbook-cli3、初始化 mkdir mybook gitbook init4、编辑SUMMARY.md # 目录 * [前言](README.md) * [第一章](Chapter1/README.md) * [第1节：衣](Chapter1/衣.md) * [第2节：食](Chapter1/食.md) * [第3节：住](Chapter1/住.md) * [第4节：行](Chapter1/行.md) * [第二章](Chapter2/README.md) * [第三章](Chapter3/README.md) * [第四章](Chapter4/README.md)再次执行 gitbook init 5、运行服务浏览mybook gitbook serve or gitbook serve --port 88886、构建html gitbook build将构建书籍，默认生成html输出到_book目录中。 7、生成pdf、epub、mobi格式电子书 npm install -g ebook-convert gitbook pdf ./ ./mybook.pdf gitbook epub .</description>
    </item>
    <item>
      <title>计算机网络基础</title>
      <link>http://ip:1313/other/computer_network_foundation-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/other/computer_network_foundation-hl/index.html</guid>
      <description>1、OSI，TCP/IP，五层协议的体系结构，以及各层协议 答:OSI分层 （7层）：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。 TCP/IP分层（4层）：网络接口层、 网际层、运输层、 应用层。 五层协议 （5层）：物理层、数据链路层、网络层、运输层、 应用层。 每一层的协议如下：物理层：RJ45、CLOCK、IEEE802.3 （中继器，集线器） 数据链路：PPP、FR、HDLC、VLAN、MAC （网桥，交换机） 网络层：IP、ICMP、ARP、RARP、OSPF、IPX、RIP、IGRP、 （路由器） 传输层：TCP、UDP、SPX 会话层：NFS、SQL、NETBIOS、RPC 表示层：JPEG、MPEG、ASII 应用层：FTP、DNS、Telnet、SMTP、HTTP、WWW、NFS 每一层的作用如下：物理层：通过媒介传输比特,确定机械及电气规范（比特Bit） 数据链路层：将比特组装成帧和点到点的传递（帧Frame） 网络层：负责数据包从源到宿的传递和网际互连（包PackeT） 传输层：提供端到端的可靠报文传递和错误恢复（段Segment） 会话层：建立、管理和终止会话（会话协议数据单元SPDU） 表示层：对数据进行翻译、加密和压缩（表示协议数据单元PPDU） 应用层：允许访问OSI环境的手段（应用协议数据单元APDU）2、IP地址的分类 答:A类地址：以0开头， 第一个字节范围：0~126（1.0.0.0 - 126.255.255.255）； B类地址：以10开头， 第一个字节范围：128~191（128.0.0.0 - 191.255.255.255）； C类地址：以110开头， 第一个字节范围：192~223（192.0.0.0 - 223.255.255.255）； 10.0.0.0—10.255.255.255， 172.16.0.0—172.31.255.255， 192.168.0.0—192.168.255.255。（Internet上保留地址用于内部）IP地址与子网掩码相与得到网络号3、ARP是地址解析协议，简单语言解释一下工作原理。 答:1：首先，每个主机都会在自己的ARP缓冲区中建立一个ARP列表，以表示IP地址和MAC地址之间的对应关系。 2：当源主机要发送数据时，首先检查ARP列表中是否有对应IP地址的目的主机的MAC地址，如果有，则直接发送数据，如果没有，就向本网段的所有主机发送ARP数据包，该数据包包括的内容有：源主机 IP地址，源主机MAC地址，目的主机的IP 地址。 3：当本网络的所有主机收到该ARP数据包时，首先检查数据包中的IP地址是否是自己的IP地址，如果不是，则忽略该数据包，如果是，则首先从数据包中取出源主机的IP和MAC地址写入到ARP列表中，如果已经存在，则覆盖，然后将自己的MAC地址写入ARP响应包中，告诉源主机自己是它想要找的MAC地址。 4：源主机收到ARP响应包后。将目的主机的IP和MAC地址写入ARP列表，并利用此信息发送数据。如果源主机一直没有收到ARP响应数据包，表示ARP查询失败。广播发送ARP请求，单播发送ARP响应。4、各种协议的介绍 答:ICMP协议： 因特网控制报文协议。它是TCP/IP协议族的一个子协议，用于在IP主机、路由器之间传递控制消息。 TFTP协议： 是TCP/IP协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议，提供不复杂、开销不大的文件传输服务。 HTTP协议： 超文本传输协议，是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。 DHCP协议： 动态主机配置协议，是一种让系统得以连接到网络上，并获取所需要的配置参数手段。 NAT协议：网络地址转换属接入广域网(WAN)技术，是一种将私有（保留）地址转化为合法IP地址的转换技术， DHCP协议：一个局域网的网络协议，使用UDP协议工作，用途：给内部网络或网络服务供应商自动分配IP地址，给用户或者内部网络管理员作为对所有计算机作中央管理的手段。5、描述RARP协议 答:RARP是逆地址解析协议，作用是完成硬件地址到IP地址的映射，主要用于无盘工作站，因为给无盘工作站配置的IP地址不能保存。 工作流程：在网络中配置一台RARP服务器，里面保存着IP地址和MAC地址的映射关系，当无盘工作站启动后，就封装一个RARP数据包，里面有其MAC地址，然后广播到网络上去，当服务器收到请求包后，就查找对应的MAC地址的IP地址装入响应报文中发回给请求者。因为需要广播请求报文，因此RARP只能用于具有广播能力的网络。6、TCP三次握手和四次挥手的全过程 答:三次握手： 第一次握手：客户端发送syn包(syn=x)到服务器，并进入SYN_SEND状态，等待服务器确认； 第二次握手：服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（syn=y），即SYN+ACK包，此时服务器进入SYN_RECV状态； 第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=y+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。 握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。 四次挥手： 与建立连接的“三次握手”类似，断开一个TCP连接则需要“四次握手”。 第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不 会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可 以接受数据。 第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号）。 第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。 第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。7、在浏览器中输入www.</description>
    </item>
    <item>
      <title>记一次被挖矿</title>
      <link>http://ip:1313/other/be_mined-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/other/be_mined-hl/index.html</guid>
      <description>[root@hl tmp]# top top - 09:56:29 up 29 days, 20:47, 4 users, load average: 96.61, 96.79, 96.79 Tasks: 530 total, 1 running, 529 sleeping, 0 stopped, 0 zombie %Cpu(s): 99.3 us, 0.7 sy, 0.0 ni, 0.0 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 st KiB Mem : 13176443+total, 1525340 free, 48863452 used, 81375632 buff/cache KiB Swap: 0 total, 0 free, 0 used. 81065032 avail Mem PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 770 HwHiAiU+ 20 0 4882144 4.</description>
    </item>
  </channel>
</rss>