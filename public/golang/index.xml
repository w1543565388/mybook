<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on My New Hugo Site</title>
    <link>http://ip:1313/golang/index.html</link>
    <description>Recent content in Golang on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <lastBuildDate>Fri, 12 Apr 2024 09:39:39 +0000</lastBuildDate>
    <atom:link href="http://ip:1313/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Authens</title>
      <link>http://ip:1313/golang/go_athens-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/golang/go_athens-hl/index.html</guid>
      <description>一、安装 docker run -d --restart=always \ -p 3000:3000 \ -v ${PWD}/config.toml:/config/config.toml \ -v ${PWD}/goproxy:/root/go \ -e all_proxy=http://192.168.0.1:1080 \ -e https_proxy=http://192.168.0.1:1080 \ -e http_proxy=http://192.168.0.1:1080 \ --name athens \ gomods/athens:latest1、config.toml GoBinaryEnvVars = [&amp;#34;GOPROXY=https://goproxy.cn&amp;#34;, &amp;#34;GOSUMDB=off&amp;#34;] GoGetWorkers = 100 StorageType = &amp;#34;disk&amp;#34; #GlobalEndpoint = &amp;#34;https://goproxy.cn,https://proxy.golang.org,https://goproxy.io,direct&amp;#34; #GlobalEndpoint = &amp;#34;https://proxy.golang.org,direct&amp;#34; #GlobalEndpoint = &amp;#34;https://proxy.golang.org,direct&amp;#34; #GlobalEndpoint = &amp;#34;https://goproxy.io,direct&amp;#34; #GlobalEndpoint = &amp;#34;https://proxy.golang.org&amp;#34; GlobalEndpoint = &amp;#34;https://mirrors.aliyun.com/goproxy/&amp;#34; #SumDBs = [&amp;#34;https://sum.golang.org&amp;#34;] SumDBs = [&amp;#34;https://sum.golang.google.cn/&amp;#34;] #DownloadMode = &amp;#34;sync&amp;#34; DownloadMode = &amp;#34;file:/root/go/download.toml&amp;#34; [Storage] [Storage.Disk] RootPath = &amp;#34;/root/go&amp;#34;2、/root/go/download.</description>
    </item>
    <item>
      <title>Go 语言相关</title>
      <link>http://ip:1313/golang/go-hl/index.html</link>
      <pubDate>Fri, 12 Apr 2024 09:39:39 +0000</pubDate>
      <guid>http://ip:1313/golang/go-hl/index.html</guid>
      <description>一、并发 1、GMP模型 GMP：机制是实现协程和并发的重要机制。&#xA;GMP机制采用了M:N模型，M个goroutine映射到N个OS thread上执行。&#xA;golang中有一个协程的概念，更轻量级的调度单元。&#xA;占用栈空间小（2KB～2GB） 上下文都在用户态切换，不会涉及到内核态 协程切换速度大约1～2微秒，golang中协程切换速度为0.2微秒左右。 GMP的模型如何设计？ 全局队列：当P中的本地队列中有协程G溢出时，会被放到全局队列中。&#xA;P的本地队列：P内置的G队列，存的数量不超过256个。&#xA;一、当队列P1中的G1在运行过程中新建G2时，G2优先存放在P1的本地队列中，如果队列满了，则会把P1队列中一半的G移动到全局队列。&#xA;二、如果P的本地队列为空，那么他会先到全局队列中获取G，如果全局队列中没有G，则会尝试从其他线程绑定的P中偷取一半的G。&#xA;g 1、g是goroutine，是对协程的抽象，是一种轻量级的线程实现，可以在单个线程中同时运行多个协程，从而实现并发执行。&#xA;2、g有自己的运行栈、状态、以及执行的任务函数（用户通过go func指定）&#xA;3、g需要绑定到p才能执行，在g的视角中，p是它的cpu&#xA;4、G需要调度到M上才能运行，M是真正的执行者，调度器最多可以创建1万个线程。&#xA;5、当一个goroutine阻塞或执行完毕时，对应的m会返回给p，p将m标记为空闲状态，并从队列中取出下一个goroutine映射到该m上执行。&#xA;goroutin有三个状态：&#xA;Waiting：goroutine正在等待systemcall执行完毕，或正在等待锁。 Runable：goroutine想要在M上执行指令。 Executing：goroutine正在M上执行指令当中。 p 1、p是调度器Processor，联系g与m&#xA;2、p的数量决定了g最大并行数量，可由用户通过GOMAXPROCS进行设定（超过CPU核数无意义）&#xA;3、go语言中的中阶层，负责将goroutine映射到m(OS thread)上执行，同时也负责调度和管理m(OS thread)。&#xA;4、p负责协程的调度和管理，维护了一个goroutine队列，用于存储待执行的goroutine，当一个goroutine需要执行时，p会从队列中取出一个goroutine，并将其映射到一个空闲的m上执行。&#xA;5、p的数量由启动时环境变量$GOMAXPROCS或者由runtime的方法GOMAXPROCS()决定，因为M需要和P绑定才能运行G，P的个数取决于设置的GOMAXPROCS，默认被设置为可用的CPU核数。&#xA;m 1、m是machine是go中线程的抽象&#xA;2、m不直接执行g，而是先和p绑定，由其实现代理&#xA;3、借由p的存在，m无需和g绑死，也无需记录g的状态信息，因此g在全生命周期中可实现跨m执行&#xA;4、操作系统中的线程实现，是操作系统调度和管理的最小执行单元，可以执行计算任务和系统调用等操作。&#xA;5、M的数量和P不一定匹配，可以设置很多M，M和P绑定才可运行，多余的M处于休眠状态。&#xA;6、m的数量，go程序启动时，会设置m的最大数量，默认10000，但是内核很难创建出这么多线程，因此默认情况下m的最大数量取决于内核。也可以调用runtime/debug中的SetMaxThreads函数 ，手动设置m的最大数量。&#xA;P和M都是程序运行时就被创建好了的吗？ P和M创建时间不同。&#xA;P：在确定P的最大数量n后，运行时系统会根据这个数量创建n个P。&#xA;M：内核级线程的初始化是由内核管理的，当没有足够的M来关联P并运行其中的可运行的G时会请求创建新的M。比如M在运行G1时被阻塞了，此时需要新的M去绑定P，如果没有在休眠的M则需要新建M。&#xA;G在MP模型中流动过程？ 1、调用go func()创建一个goroutine。&#xA;2、新创建的G优先保存在P的本地队列中，如果P的本地队列已经满了就会保存在全局队列中。&#xA;3、M需要在P的本地队列弹出一个可执行的G，如果P的本地队列为空，则先会去全局队列在中获取G，如果全局队列也为空则去其他P中偷取一半的G放到自己的P中。&#xA;4、G将相关参数传输给M，为M执行G做准备。&#xA;5、当M执行某一个G时，如果发生了系统调用会导致M阻塞，如果当前P队列中有一些G，runtime会将线程M和P分离，然后再获取空闲的线程或创建一个新的内核级线程来服务这个P，阻塞调用完成后G被销毁将值返回。&#xA;6、销毁G，将执行结果返回。&#xA;7、当M系统调用结束后，这个M会尝试获取一个空闲的P执行，如果获取不到P，那么这个线程M变成休眠状态，加入到空闲线程。&#xA;2、并发 并发：相继发生，同一时间间隔发生&#xA;并行：同时进行，同一时刻&#xA;3、sync 1.sync.Mutex互斥锁 保证同一时间只有一个goroutine可以获取锁，从而实现对共享资源的互斥访问。&#xA;Lock 获取锁，会阻塞直到获取锁为止 Unlock释放锁 TryLock尝试获取锁，如果锁已经被占用则不会等待直接返回 var count int var mutex sync.Mutex func increase() { mutex.</description>
    </item>
  </channel>
</rss>